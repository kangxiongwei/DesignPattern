命令模式：

1.概述
    在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。
    但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。
    在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。
    这就是命令模式（Command Pattern）。

2.模式结构
    Command(Interface): 定义命令需要执行的方法
    ConcreteCommand(class): implements Command，有一个Receiver的引用，在命名方法中执行Receiver的方法。
    Receiver(class): 命令接收者，执行真正的方法。
    Invoker(class): 持有Command对象，调用Command定义的方法。
    Client(class): 定义Invoker和ConcreteCommand，并通过Invoker来调用命令完成操作。

3.模式分析
    1.命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。
    2.每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作。
    3.命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。
    4.命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。
    5.命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。

4.适用环境
    1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
    2.系统需要在不同的时间指定请求、将请求排队和执行请求。
    3.系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
    4.系统需要将一组操作组合在一起，即支持宏命令。
